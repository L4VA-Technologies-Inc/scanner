name: Deploy Scanner App

on:
  push:
    branches:
      - main
      - dev

env:
  # Use docker.io for Docker Hub if you prefer
  REGISTRY: ghcr.io
  # Replace with your Github username or org name
  IMAGE_NAME: ${{ github.repository }} # e.g., your-username/l4va-scanner
  PROJECT_DIR: /home/scanner/scanner-${{ github.ref_name }} # Use ref_name for better reliability

jobs:
  build:
    name: Build Node.js App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your preferred Node.js version
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build # Assuming you have a build script in package.json

      # Optional: Add steps for linting and testing here if needed
      # - name: Lint
      #   run: npm run lint
      # - name: Test
      #   run: npm run test

  push_to_registry:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build # Depends on the build job completing successfully
    permissions:
      contents: read
      packages: write # Needed to push to ghcr.io
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Needed for github.repository variable used in IMAGE_NAME
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use built-in GITHUB_TOKEN for GHCR

      # Set up Buildx so we can use GHA cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Tag with branch name and commit SHA
          tags: |
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Hetzner via SSH
    runs-on: ubuntu-latest
    needs: push_to_registry # Depends on the image being pushed
    # Specify the environment based on the branch
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      # url: Optional deployment URL, uncomment and modify if needed

    steps:
      - name: List files in workspace
        run: ls -la

      - name: Copy setup_db.sql to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "setup_db.sql"
          target: "${{ env.PROJECT_DIR }}"

      - name: Deploy to Server and Run DB Setup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Ensuring deployment directory exists..."
            mkdir -p ${{ env.PROJECT_DIR }}
            cd ${{ env.PROJECT_DIR }}
            echo "Creating .env file..."
            echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
            echo ".env file created."

            echo "Running database setup script..."
            # Extract DATABASE_URL and run psql
            # Note: This assumes psql is in PATH and setup_db.sql is idempotent or first run
            export PGPASSWORD=$(echo $DATABASE_URL | awk -F':' '{print $3}' | awk -F'@' '{print $1}')
            DB_USER=$(echo $DATABASE_URL | awk -F'://' '{print $2}' | awk -F':' '{print $1}')
            DB_HOST=$(echo $DATABASE_URL | awk -F'@' '{print $2}' | awk -F':' '{print $1}')
            DB_PORT=$(echo $DATABASE_URL | awk -F':' '{print $4}' | awk -F'/' '{print $1}')
            DB_NAME=$(echo $DATABASE_URL | awk -F'/' '{print $3}')
            psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f setup_db.sql

            echo "Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            echo "Docker login successful."

            echo "Pulling latest image..."
            # Extract image name and tag from the full image path provided by the meta step
            # This assumes one tag is generated (e.g., ghcr.io/user/repo:main or ghcr.io/user/repo:dev)
            # Adjust if your tagging strategy in 'push_to_registry' is different
            IMAGE_TAG=$(echo "${{ needs.push_to_registry.outputs.image_tag }}" | cut -d ',' -f1)
            echo "Image tag to pull: ${IMAGE_TAG}"
            docker pull ${IMAGE_TAG}
            echo "Image pull complete."

            echo "Pulling latest images..."
            docker compose -f docker-compose.yml pull

            echo "Starting application with Docker Compose..."
            docker compose -f docker-compose.yml up -d --force-recreate --remove-orphans
            echo "Deployment complete."

            echo "Cleaning up unused Docker images..."
            docker image prune -f

            # Optional: Add docker compose down to stop containers if needed before pull/up
            # echo "Stopping existing containers..."
            # docker compose -f docker-compose.yml down --remove-orphans
